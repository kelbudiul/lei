// Test type compatibility in assignments
fn int testTypeCompatibility() {
    var x: int = 42;
    var y: float = 3.14;
    var b: bool = true;
    var s: str = "hello";

    // Type mismatch tests
    x = y;              // Error: cannot assign float to int
    y = x;              // OK: int can be converted to float
    b = x;              // Error: cannot assign int to bool
    x = b;              // Error: cannot assign bool to int
    s = x;              // Error: cannot assign int to string

    // Arithmetic operation type checks
    var r1: int = x + y;     // Error: mixed int/float arithmetic
    var r2: float = x + y;   // OK: result is float
    var r3: int = b + x;     // Error: cannot add bool and int
    var r4: str = s + x;     // Error: cannot add string and int
    
    return 0;
}

// Test variable scope rules
fn int testScopes() {
    var x: int = 1;
    
    {
        {
            var y: int = 2;
        }
        x = 3;              // OK: outer scope accessible
        {
            {
                var x: int = 4; // OK: shadows outer x
            }
            y = 5;          // OK: outer y accessible
        }
        x = y;              // OK: using correct scopes
    }
    y = 6;                  // Error: y not in scope
    
    if true {
        var z: int = 7;
    }
    z = 8;                  // Error: z not in scope
    
    return 0;
}

// Test array operations
fn int testArrays() {
    var arr1: int[3];
    var arr2: int[] = {1, 2, 3};
    var i: int = 0;
    var f: float = 1.0;

    arr1[i] = 42;          // OK: integer index
    arr1[f] = 42;          // Error: float index
    arr1[true] = 42;       // Error: bool index
    arr1["0"] = 42;        // Error: string index

    var x: int = arr1[i];  // OK: array access
    var y: float = arr1[i]; // Error: type mismatch in assignment

    arr1 = arr2;           // OK: compatible array types
    var arr3: float[] = arr1; // Error: incompatible array types
    
    return 0;
}

// Test function calls and returns
fn int add(a: int, b: int) {
    return a + b;
}

fn float multiply(x: float, y: float) {
    return x * y;
}

fn int testFunctions() {
    var i: int = add(1, 2);         // OK
    var f: float = add(1, 2);       // Error: int to float assignment
    
    add(1.0, 2.0);                  // Error: float arguments for int parameters
    add(1);                         // Error: too few arguments
    add(1, 2, 3);                   // Error: too many arguments
    
    multiply(1, 2);                 // OK: int can be converted to float
    var r: int = multiply(1, 2);    // Error: float to int assignment
    
    return 42;
}

// Test conditional expressions
fn int testConditions() {
    var x: int = 1;
    var f: float = 1.0;
    var b: bool = true;

    if x {                     // Error: condition must be boolean
        x = 2;
    }

    if f {                     // Error: condition must be boolean
        f = 2.0;
    }

    while 42 {                 // Error: condition must be boolean
        x = x + 1;
    }

    if b && x {               // Error: cannot use AND with int
        x = 3;
    }

    if b || f {               // Error: cannot use OR with float
        x = 4;
    }

    // Valid conditions
    if b && true {
        x = 5;
    }

    while b || false {
        x = 6;
    }
    
    return 0;
}

fn int main() {
    testTypeCompatibility();
    testScopes();
    testArrays();
    testFunctions();
    testConditions();
    return 0;
}