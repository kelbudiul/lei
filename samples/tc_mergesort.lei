fn void printArray(arr: int[], size: int) {
    var i: int = 0;
    while i < size {
        print(arr[i]);
        print(" ");
        i = i + 1;
    }
    print("\n");
}

fn void merge(arr: int[], left: int, mid: int, right: int) {
    // Calculate sizes of two subarrays to merge
    var n1: int = mid - left + 1;
    var n2: int = right - mid;
    
    // Create temporary arrays
    var leftArr: int[] = malloc(n1 * sizeof(int));
    var rightArr: int[] = malloc(n2 * sizeof(int));
    
    // Copy data to temporary arrays
    var i: int = 0;
    while i < n1 {
        leftArr[i] = arr[left + i];
        i = i + 1;
    }
    
    i = 0;
    while i < n2 {
        rightArr[i] = arr[mid + 1 + i];
        i = i + 1;
    }
    
    // Merge the temporary arrays back
    i = 0;
    var j: int = 0;
    var k: int = left;
    
    while i < n1 && j < n2 {
        if leftArr[i] <= rightArr[j] {
            arr[k] = leftArr[i];
            i = i + 1;
        } else {
            arr[k] = rightArr[j];
            j = j + 1;
        }
        k = k + 1;
    }
    
    // Copy remaining elements of leftArr if any
    while i < n1 {
        arr[k] = leftArr[i];
        i = i + 1;
        k = k + 1;
    }
    
    // Copy remaining elements of rightArr if any
    while j < n2 {
        arr[k] = rightArr[j];
        j = j + 1;
        k = k + 1;
    }
    
    // Free temporary arrays
    free(leftArr);
    free(rightArr);
}

fn void mergeSort(arr: int[], left: int, right: int) {
    if left < right {
        // Calculate middle point
        var mid: int = left + (right - left) / 2;
        
        // Sort first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        
        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

fn int main() {
    // Create and initialize test array
    var size: int = 8;
    var arr: int[] = malloc(size * sizeof(int));
    
    // Initialize with some unsorted values
    arr[0] = 64;
    arr[1] = 34;
    arr[2] = 25;
    arr[3] = 12;
    arr[4] = 22;
    arr[5] = 11;
    arr[6] = 90;
    arr[7] = 1;
    
    print("Original array:");
    printArray(arr, size);
    
    // Sort the array
    mergeSort(arr, 0, size - 1);
    
    print("Sorted array:");
    printArray(arr, size);
    
    // Free allocated memory
    free(arr);
    
    return 0;
}