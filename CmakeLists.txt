# Specify minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Define project name and version
project(leic VERSION 1.0)

# Set C++ standard requirements
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# WSL/Linux compiler selection
if(EXISTS "/usr/bin/clang++")
    set(CMAKE_CXX_COMPILER "/usr/bin/clang++")
    message(STATUS "Using Clang compiler")
else()
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
    message(STATUS "Using GCC compiler")
endif()

# Find packages
find_package(GTest REQUIRED)
find_package(LLVM REQUIRED CONFIG)

# LLVM setup
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})

# Define source files (excluding main.cpp and test files)
set(LIB_SOURCES
    src/ast.cpp
    src/lexer.cpp
    src/ast_printer.cpp
    src/parser.cpp
    src/error_handler.cpp
    src/semantic_visitor.cpp
    src/source_reader.cpp
    src/symbol_table.cpp
)

# Create a library target for the compiler components
add_library(lei_compiler_lib ${LIB_SOURCES})

# Set up include directories for the library
target_include_directories(lei_compiler_lib PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Configure LLVM libraries
llvm_map_components_to_libnames(llvm_libs
    Support
    Core
    IRReader
    OrcJIT
    native
)

# Link LLVM libraries to our library target
target_link_libraries(lei_compiler_lib PRIVATE ${llvm_libs})

# Create the main executable
add_executable(${PROJECT_NAME} src/main.cpp)
target_link_libraries(${PROJECT_NAME} PRIVATE lei_compiler_lib ${llvm_libs})

# Enable testing
enable_testing()

# Define test executables
set(TEST_SOURCES
    tests/lexer_tests.cpp
    tests/parser_tests.cpp
    tests/semantic_analyzer_tests.cpp
)

# Create test targets
foreach(test_source ${TEST_SOURCES})
    # Get the filename without extension
    get_filename_component(test_name ${test_source} NAME_WE)
    
    # Create test executable
    add_executable(${test_name} ${test_source})
    
    # Link with our library and GTest
    target_link_libraries(${test_name} 
        PRIVATE 
        lei_compiler_lib
        GTest::GTest 
        GTest::Main
    )
    
    # Add the test to CTest
    add_test(NAME ${test_name} COMMAND ${test_name})
endforeach()

# Set compiler warning flags
target_compile_options(lei_compiler_lib PRIVATE 
    -Wall
    -Wextra
    -Wpedantic
    -fPIC
)

# Configure output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Installation rules
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION bin
)