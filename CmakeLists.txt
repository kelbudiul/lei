# Specify minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Define project name and version
project(LeiCompiler VERSION 1.0)

# Set C++ standard requirements
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# WSL/Linux compiler selection
if(EXISTS "/usr/bin/clang++")
    set(CMAKE_CXX_COMPILER "/usr/bin/clang++")
    message(STATUS "Using Clang compiler")
else()
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
    message(STATUS "Using GCC compiler")
endif()

# Find required packages
find_package(LLVM REQUIRED CONFIG)
find_package(GTest REQUIRED)

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

# Add LLVM compilation flags and include paths
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})

# Define source files (no duplication)
set(COMPILER_SOURCES
    src/lexer.cpp
    src/source_reader.cpp
    src/error_handler.cpp
    src/token.cpp
)

# Create a static library from the compiler components
add_library(${PROJECT_NAME}_lib STATIC ${COMPILER_SOURCES})

# Set up include directories for the library
target_include_directories(${PROJECT_NAME}_lib PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Configure compiler options for the library
target_compile_options(${PROJECT_NAME}_lib PRIVATE 
    -Wall
    -Wextra
    -Wpedantic
    -fPIC
)

# Create the main executable
add_executable(${PROJECT_NAME} src/main.cpp)

# Link the main executable with our library and LLVM
llvm_map_components_to_libnames(llvm_libs
    Support
    Core
    IRReader
    OrcJIT
    native
)

target_link_libraries(${PROJECT_NAME} PRIVATE
    ${PROJECT_NAME}_lib
    ${llvm_libs}
)

# Configure output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Enable testing
enable_testing()

# Create test executable
add_executable(${PROJECT_NAME}_tests
    tests/lexer_tests.cpp
)

# Link test executable with Google Test and our library
target_link_libraries(${PROJECT_NAME}_tests PRIVATE
    ${PROJECT_NAME}_lib
    GTest::gtest_main
    GTest::gtest
    ${llvm_libs}
)

# Add the test to CTest
include(GoogleTest)
gtest_discover_tests(${PROJECT_NAME}_tests)

# Installation rules
install(TARGETS 
    ${PROJECT_NAME}
    ${PROJECT_NAME}_lib
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

# Enable testing
enable_testing()

# Define test categories
set(TEST_CATEGORIES
    lexer
    # parser
    # semantic
    # codegen
)

# Create test executable for each category
foreach(category ${TEST_CATEGORIES})
    # Create executable name
    set(test_target "${PROJECT_NAME}_${category}_tests")
    
    # Add executable
    add_executable(${test_target}
        tests/${category}_tests.cpp
    )
    
    # Link with library and test framework
    target_link_libraries(${test_target} PRIVATE
        ${PROJECT_NAME}_lib
        GTest::gtest_main
        GTest::gtest
        ${llvm_libs}
    )
    
    # Add to CTest
    gtest_discover_tests(${test_target}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests
        TEST_PREFIX "${category}:"
    )
    
    # Set output directory
    set_target_properties(${test_target} PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/tests
    )
endforeach()

# Optional: Add a custom target to run all tests
add_custom_target(check
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
    DEPENDS ${TEST_TARGETS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
)