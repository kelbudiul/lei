# Specify minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Define project name and version
project(LeiCompiler VERSION 1.0)

# Set C++ standard requirements
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# WSL/Linux compiler selection
if(EXISTS "/usr/bin/clang++")
    set(CMAKE_CXX_COMPILER "/usr/bin/clang++")
    message(STATUS "Using Clang compiler")
else()
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
    message(STATUS "Using GCC compiler")
endif()

# Find packages
find_package(LLVM REQUIRED CONFIG)
find_package(GTest REQUIRED)  # Use system installed GTest

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

# Add LLVM compilation flags and include paths
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})

# Define source files for the main library
set(LIB_SOURCES
    src/lexer.cpp
    src/source_reader.cpp
)

# Create a static library from the compiler components
add_library(${PROJECT_NAME}_lib STATIC ${LIB_SOURCES})

# Set up include directories for the library
target_include_directories(${PROJECT_NAME}_lib PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Define source files for the main executable
set(MAIN_SOURCES
    src/main.cpp
)

# Create the main executable
add_executable(${PROJECT_NAME} ${MAIN_SOURCES})

# Link the main executable with our library and LLVM
llvm_map_components_to_libnames(llvm_libs
    Support
    Core
    IRReader
    OrcJIT
    native
)

target_link_libraries(${PROJECT_NAME} PRIVATE
    ${PROJECT_NAME}_lib
    ${llvm_libs}
)

# Set compiler warning flags and options
target_compile_options(${PROJECT_NAME} PRIVATE 
    -Wall
    -Wextra
    -Wpedantic
    -fPIC
)

# Configure output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Enable testing
enable_testing()

# Define test sources
set(TEST_SOURCES
    tests/lexer_tests.cpp
)

# Create test executable
add_executable(${PROJECT_NAME}_tests ${TEST_SOURCES})

# Link test executable with Google Test and our library
target_link_libraries(${PROJECT_NAME}_tests PRIVATE
    ${PROJECT_NAME}_lib
    GTest::gtest_main
    GTest::gtest
)

# Add the test to CTest
include(GoogleTest)
gtest_discover_tests(${PROJECT_NAME}_tests)

# Installation rules
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION bin
)

# Install the library
install(TARGETS ${PROJECT_NAME}_lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)